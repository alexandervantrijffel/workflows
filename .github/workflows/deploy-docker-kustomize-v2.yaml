on:
  workflow_call:
    inputs:
      docker-image:
        required: true
        type: string
      github-sha:
        required: true
        type: string
      build-number:
        required: true
        type: string
      app-name:
        required: true
        type: string

    secrets:
      registry:
        required: true
      registry-username:
        required: true
      registry-password:
        required: true
      k3s-dac-deploy-key:
        required: true
      gh-pat-token:
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      DOCKER_IMAGE: ${{ inputs.docker-image }}
      BUILD_CACHE: /tmp/buildkit-cache
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to private registry
        uses: docker/login-action@v3
        with:
          registry: "${{ secrets.registry }}"
          username: ${{ secrets.registry-username }}
          password: ${{ secrets.registry-password }}

      # github's ubuntu-latest have a lot of bloat pre-installed and we need the space for some projects
      - name: Free disk space
        run: |
          # clean up in the background as this step takes up to 4 minutes!
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc /usr/local/share/powershell &

      - name: Prepare image tag
        id: prep
        run: |
          SHA=$(echo "${{ inputs.github-sha }}" | head -c8)
          BUILDNUM=${{ inputs.build-number }}
          IMAGE=${{ secrets.registry }}/${{ inputs.app-name }}
          echo "IMAGE=${IMAGE} BUILDNUM=${BUILDNUM} SHA=${SHA}"

          {
            echo "tagged_image=${IMAGE}:${BUILDNUM}-${SHA}"
            echo "latest_image=${IMAGE}:latest"
            echo "sha=${SHA}"
          } >> "$GITHUB_OUTPUT"

          echo "argo_image_with_tag=${IMAGE}:${BUILDNUM}-${SHA}" >> "$GITHUB_OUTPUT"

      - name: Compute cache key
        run: echo "CACHE_KEY=${{ hashFiles('**/*') }}" >> "$GITHUB_ENV"

      - name: Cache docker layers
        uses: actions/cache@v4
        id: dockercache
        with:
          path: ${{ env.BUILD_CACHE }}
          key: cache-${{ env.CACHE_KEY }}
          restore-keys: |
            cache-

      - name: Cache buildkitd
        uses: actions/cache@v3
        id: buildkit-cache
        with:
          path: |
            /usr/local/bin/buildctl
            /usr/local/bin/buildkitd
          key: buildkit-
          restore-keys: |
            buildkit-

      - if: ${{ steps.buildkit-cache.outputs.cache-hit != 'true' }}
        name: Install the latest buildkit release
        run: |
          BUILDKIT_URL="$(curl -sL https://api.github.com/repos/moby/buildkit/releases \
            | jq -r 'map(select(.name|startswith("v")))|sort_by(.name)[-1].assets[]|select(.name|endswith(".linux-amd64.tar.gz")).browser_download_url')"
          curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -L "${BUILDKIT_URL}" | sudo tar -xz -C /usr/local

      - name: Start buildkit daemon
        run: |
          sudo --non-interactive --shell <<END_SUDO
            install -d -m 0750 -o root -g docker /run/buildkit
            buildkitd &
            while ! test -S /run/buildkit/buildkitd.sock; do sleep 0.1; done
            chgrp docker /run/buildkit/buildkitd.sock
          END_SUDO

      - name: Build docker image
        run: |
          set -euo pipefail

          buildctl build ... \
            --frontend=dockerfile.v0 --local dockerfile=. --local context=. \
            --export-cache "type=local,dest=${BUILD_CACHE},mode=max" \
            --import-cache "type=local,src=${BUILD_CACHE}" \
            --output type=docker,name=${{ steps.prep.outputs.tagged_image }} | docker load

          # Verify image was loaded successfully
          if ! docker image inspect ${{ steps.prep.outputs.tagged_image }} >/dev/null 2>&1; then
            echo "ERROR: Image ${{ steps.prep.outputs.tagged_image }} not found after build"
            exit 1
          fi

          echo "âœ“ Image loaded successfully"
          echo "Cache size: $(du -sh ${BUILD_CACHE})"

      - name: Push image
        run: |
          docker tag ${{ steps.prep.outputs.tagged_image }} ${{ steps.prep.outputs.latest_image }}
          docker push ${{ steps.prep.outputs.tagged_image }}
          docker push ${{ steps.prep.outputs.latest_image }}

      - name: Cache kustomize
        uses: actions/cache@v3
        id: kustomize-cache
        with:
          path: /usr/local/bin/kustomize
          key: kustomize-
          restore-keys: |
            kustomize-

      - if: ${{ steps.kustomize-cache.outputs.cache-hit != 'true' }}
        name: Install kustomize
        run: |
          if [[ ! -f  /usr/local/bin/kustomize ]]
          then
              curl  -X GET -H "Authorization: token ${{ secrets.gh-pat-token }}" "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh"  | bash
              chmod +x kustomize
              mv kustomize /usr/local/bin/kustomize
          fi

      - name: Run kustomize and push to GitOps environment repo
        run: |
          (cd .k8s/overlays/prod && /usr/local/bin/kustomize edit set image ${{ secrets.registry }}/${{ inputs.app-name }}=${{ steps.prep.outputs.argo_image_with_tag }})
          mkdir -p apps/${{ inputs.app-name }}/appmanifests
          /usr/local/bin/kustomize build .k8s/overlays/prod > apps/${{ inputs.app-name }}/appmanifests/all.yaml

      - name: Push to GitOps environment repo
        uses: cpina/github-action-push-to-another-repository@main
        env:
          SSH_DEPLOY_KEY: ${{ secrets.k3s-dac-deploy-key }}
        with:
          source-directory: "apps/${{ inputs.app-name }}/appmanifests"
          target-directory: "apps/${{ inputs.app-name }}/appmanifests"
          destination-github-username: "alexandervantrijffel"
          destination-repository-name: "k3s-dac-deploy"
          user-name: "Mr. CI"
          user-email: mrci@users.noreply.github.com
          commit-message: "${{ inputs.app-name }} ${{ inputs.build-number }}-${{ steps.prep.outputs.sha }}"
          target-branch: main
